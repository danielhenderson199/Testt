name: VM-Server

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'OS ISO?'
        required: true
        default: 'https://software-download.microsoft.com/db/Win11_22H2_English_x64.iso'
      vm_name:
        description: 'Name of the VM/disk'
        required: true
        default: 'windowsserver'
      vcpus:
        description: 'Number of vCPUs'
        required: true
        default: '4'
      ram:
        description: 'RAM in GB'
        required: true
        default: '16'
      disk:
        description: 'Disk size in GB'
        required: true
        default: '256'

jobs:
  run-vm:
    runs-on: ubuntu-latest
    env:
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
      TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}

    steps:
      - name: Send Start Info
        run: |
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"**Starting VM Setup**\n**OS ISO:** \`${{ github.event.inputs.iso_url }}\`\n**VM Name:** \`${{ github.event.inputs.vm_name }}\`\n**vCPUs:** \`${{ github.event.inputs.vcpus }}\`\n**RAM:** \`${{ github.event.inputs.ram }} GB\`\n**Disk:** \`${{ github.event.inputs.disk }} GB (NVMe)\`\"}"

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86 ovmf curl novnc websockify
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Download Windows ISO
        run: |
          wget -O "${{ github.event.inputs.vm_name }}.iso" "${{ github.event.inputs.iso_url }}"
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"content":"the vm iso has been downloaded."}'

      - name: Create Disk
        run: |
          qemu-img create -f qcow2 "${{ github.event.inputs.vm_name }}.qcow2" "${{ github.event.inputs.disk }}G"
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"Disk Has Been Created (${{
              github.event.inputs.disk
            }}G).\"}"

      - name: Start Tailscale
        run: |
          sudo tailscaled --tun=userspace-networking --socks5-server=localhost:1055 &
          sleep 5
          sudo tailscale up --authkey=$TAILSCALE_AUTHKEY --hostname="${{ github.event.inputs.vm_name }}" --accept-routes
          TS_IP=$(tailscale ip -4 | head -n 1)
          echo "TAILSCALE_IP=$TS_IP" >> $GITHUB_ENV
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"Daniel's Tailscale Has been connected on vm\`$TS_IP\`\"}"

      - name: Launch VM and Hold Job
        run: |
          if [ -f /usr/share/OVMF/OVMF_CODE_4M.fd ]; then
            CODE_PATH=/usr/share/OVMF/OVMF_CODE_4M.fd
            VARS_PATH=/usr/share/OVMF/OVMF_VARS_4M.fd
          else
            wget -q https://github.com/tianocore/edk2/releases/download/edk2-stable202307/OVMF_CODE.fd -O OVMF_CODE.fd
            wget -q https://github.com/tianocore/edk2/releases/download/edk2-stable202307/OVMF_VARS.fd -O OVMF_VARS.fd
            CODE_PATH=./OVMF_CODE.fd
            VARS_PATH=./OVMF_VARS.fd
          fi

          sudo qemu-system-x86_64 \
            -enable-kvm \
            -cpu host \
            -smp ${{ github.event.inputs.vcpus }} \
            -m $(( ${{ github.event.inputs.ram }} * 1024 ))M \
            -drive if=pflash,format=raw,readonly=on,file=$CODE_PATH \
            -drive if=pflash,format=raw,file=$VARS_PATH \
            -drive file="${{ github.event.inputs.vm_name }}.qcow2",format=qcow2,if=none,id=nvme_disk \
            -device nvme,drive=nvme_disk,serial=deadbeef \
            -cdrom "${{ github.event.inputs.vm_name }}.iso" \
            -boot d \
            -vnc :0 \
            -netdev user,id=net0,hostfwd=tcp::3389-:3389 \
            -device e1000,netdev=net0 \
            -device usb-ehci,id=ehci \
            -device usb-tablet,bus=ehci.0 &

          sleep 10

          nohup websockify --web=/usr/share/novnc 6080 localhost:5900 &

          VNC_LINK="http://$TAILSCALE_IP:6080/vnc.html"
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"üöÄ VM Started! Connect via VNC and install Windows:\nüîπ **Tailscale IP:** \`$TAILSCALE_IP\`\nüîπ **noVNC:** $VNC_LINK\nüë§ Owner: @Danielreal64\"}"

          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"content":"‚è≥ Workflow will remain active for 6 hours..."}'

          timeout 21600 bash -c "while true; do sleep 30; done"
