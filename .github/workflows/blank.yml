name: VM-Server-AutoInstall

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'Windows ISO URL'
        required: true
        default: 'https://software-download.microsoft.com/db/Win11_22H2_English_x64.iso'
      vm_name:
        description: 'VM/Disk name'
        required: true
        default: 'windowsserver'
      product_key:
        description: 'Product Key'
        required: true
        default: 'W269N-WFGWX-YVC9B-4J6C9-T83GX'

jobs:
  autoinstall-windows:
    runs-on: ubuntu-latest
    env:
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
      TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}

    steps:
      - name: Send Start Info
        run: |
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"üõ†Ô∏è **Starting Auto Windows Install**\nISO: \`${{ github.event.inputs.iso_url }}\`\nVM: \`${{ github.event.inputs.vm_name }}\`\nüîë Product Key: \`${{ github.event.inputs.product_key }}\``}"

      - name: Install Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-utils qemu-system-x86 genisoimage curl unzip p7zip-full ovmf novnc websockify

      - name: Download and Mount Windows ISO
        run: |
          wget -O win.iso "${{ github.event.inputs.iso_url }}"
          mkdir -p iso mnt build
          sudo 7z x -oiso win.iso

      - name: Create Autounattend.xml
        run: |
          cat > iso/autounattend.xml <<EOF
          <?xml version="1.0" encoding="utf-8"?>
          <unattend xmlns="urn:schemas-microsoft-com:unattend">
            <settings pass="windowsPE">
              <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
                <ImageInstall>
                  <OSImage>
                    <InstallFrom>
                      <MetaData wcm:action="add">
                        <Key>/IMAGE/INDEX</Key>
                        <Value>6</Value> <!-- Pro edition -->
                      </MetaData>
                    </InstallFrom>
                    <InstallTo>
                      <DiskID>0</DiskID>
                      <PartitionID>1</PartitionID>
                    </InstallTo>
                  </OSImage>
                </ImageInstall>
                <UserData>
                  <ProductKey>
                    <Key>${{ github.event.inputs.product_key }}</Key>
                    <WillShowUI>Never</WillShowUI>
                  </ProductKey>
                  <AcceptEula>true</AcceptEula>
                  <FullName>AutoInstall</FullName>
                  <Organization>GitHubActions</Organization>
                </UserData>
              </component>
            </settings>
            <settings pass="oobeSystem">
              <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
                <OOBE>
                  <HideEULAPage>true</HideEULAPage>
                  <NetworkLocation>Work</NetworkLocation>
                  <ProtectYourPC>1</ProtectYourPC>
                </OOBE>
                <UserAccounts>
                  <AdministratorPassword>
                    <Value>Passw0rd!</Value>
                    <PlainText>true</PlainText>
                  </AdministratorPassword>
                </UserAccounts>
                <AutoLogon>
                  <Password>
                    <Value>Passw0rd!</Value>
                    <PlainText>true</PlainText>
                  </Password>
                  <Enabled>true</Enabled>
                  <Username>Administrator</Username>
                </AutoLogon>
                <RegisteredOwner>AutoInstall</RegisteredOwner>
                <TimeZone>UTC</TimeZone>
              </component>
            </settings>
          </unattend>
          EOF

      - name: Rebuild ISO with Answer File
        run: |
          cp iso/autounattend.xml iso/
          genisoimage -U -b "boot/etfsboot.com" \
            -no-emul-boot -boot-load-size 8 -hide boot.catalog \
            -o "autoinstall.iso" iso/

      - name: Create Disk Image
        run: qemu-img create -f qcow2 "${{ github.event.inputs.vm_name }}.qcow2" 256G

      - name: Start Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscaled --tun=userspace-networking --socks5-server=localhost:1055 &
          sleep 5
          sudo tailscale up --authkey=$TAILSCALE_AUTHKEY --hostname="${{ github.event.inputs.vm_name }}" --accept-routes
          echo "TAILSCALE_IP=$(tailscale ip -4 | head -n 1)" >> $GITHUB_ENV

      - name: Boot VM with Auto-Install
        run: |
          if [ -f /usr/share/OVMF/OVMF_CODE_4M.fd ]; then
            CODE_PATH=/usr/share/OVMF/OVMF_CODE_4M.fd
            VARS_PATH=/usr/share/OVMF/OVMF_VARS_4M.fd
          else
            wget -q https://github.com/tianocore/edk2/releases/download/edk2-stable202307/OVMF_CODE.fd -O OVMF_CODE.fd
            wget -q https://github.com/tianocore/edk2/releases/download/edk2-stable202307/OVMF_VARS.fd -O OVMF_VARS.fd
            CODE_PATH=./OVMF_CODE.fd
            VARS_PATH=./OVMF_VARS.fd
          fi

          sudo qemu-system-x86_64 \
            -enable-kvm \
            -cpu host -smp 4 -m 16G \
            -drive if=pflash,format=raw,readonly=on,file=$CODE_PATH \
            -drive if=pflash,format=raw,file=$VARS_PATH \
            -drive file="${{ github.event.inputs.vm_name }}.qcow2",format=qcow2 \
            -cdrom autoinstall.iso \
            -boot d \
            -vnc :0 \
            -netdev user,id=net0,hostfwd=tcp::3389-:3389 \
            -device e1000,netdev=net0 \
            -device usb-ehci,id=ehci \
            -device usb-tablet,bus=ehci.0 &

          sleep 10
          nohup websockify --web=/usr/share/novnc 6080 localhost:5900 &

          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"‚úÖ Auto-install VM started!\nüåê VNC: http://$TAILSCALE_IP:6080/vnc.html\nüßë Owner: @Danielreal64\"}"

          timeout 21600 bash -c "while true; do sleep 30; done"
