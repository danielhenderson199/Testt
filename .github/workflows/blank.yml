name: VM-Server

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'OS ISO?'
        required: true
        default: 'https://software-download.microsoft.com/db/Win11_22H2_English_x64.iso'
      vm_name:
        description: 'Name of the VM/disk'
        required: true
        default: 'windowsserver'

jobs:
  run-vm:
    runs-on: ubuntu-latest
    env:
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
      TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}

    steps:
      - name: Send Start Info
        run: |
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"**Starting VM Setup**\n**OS ISO:** \`${{ github.event.inputs.iso_url }}\`\n**VM Name:** \`${{ github.event.inputs.vm_name }}\`\n**Disk Size:** 256GB\"}"

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libvirt-daemon-system libvirt-clients virtinst ovmf curl novnc websockify
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Download Windows ISO
        run: |
          wget -O "${{ github.event.inputs.vm_name }}.iso" "${{ github.event.inputs.iso_url }}"
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"content":"‚úÖ ISO downloaded."}'

      - name: Create 256GB Storage Volume for VM
        run: |
          sudo virsh pool-list --all || sudo systemctl start libvirtd
          sudo virsh pool-list --all
          # Create default storage pool if missing
          if ! sudo virsh pool-info default; then
            sudo virsh pool-define-as default dir - - - - /var/lib/libvirt/images
            sudo virsh pool-start default
            sudo virsh pool-autostart default
          fi
          sudo virsh vol-create-as default "${{ github.event.inputs.vm_name }}.qcow2" 256G --format qcow2
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"content":"üì¶ Virtual disk created (256G) via libvirt."}'

      - name: Start Tailscale
        run: |
          sudo tailscaled --tun=userspace-networking --socks5-server=localhost:1055 &
          sleep 5
          sudo tailscale up --authkey=$TAILSCALE_AUTHKEY --hostname="${{ github.event.inputs.vm_name }}" --accept-routes
          TS_IP=$(tailscale ip -4 | head -n 1)
          echo "TAILSCALE_IP=$TS_IP" >> $GITHUB_ENV
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"üîå Tailscale connected: \`$TS_IP\`\"}"

      - name: Launch VM with virt-install
        run: |
          # Check if OVMF firmware files exist (UEFI boot)
          if [ -f /usr/share/OVMF/OVMF_CODE.fd ]; then
            FIRMWARE_OPTS="--boot uefi --loader /usr/share/OVMF/OVMF_CODE.fd --nvram /var/lib/libvirt/qemu/nvram/${{ github.event.inputs.vm_name }}_VARS.fd"
            # Create NVRAM file if missing
            if [ ! -f /var/lib/libvirt/qemu/nvram/${{ github.event.inputs.vm_name }}_VARS.fd ]; then
              sudo cp /usr/share/OVMF/OVMF_VARS.fd /var/lib/libvirt/qemu/nvram/${{ github.event.inputs.vm_name }}_VARS.fd
              sudo chown libvirt-qemu:kvm /var/lib/libvirt/qemu/nvram/${{ github.event.inputs.vm_name }}_VARS.fd
            fi
          else
            FIRMWARE_OPTS=""
          fi

          sudo virt-install \
            --name "${{ github.event.inputs.vm_name }}" \
            --ram 16384 \
            --vcpus 4 \
            --os-type=windows \
            --os-variant=win10 \
            --disk "pool=default,volume=${{ github.event.inputs.vm_name }}.qcow2" \
            --cdrom "${{ github.event.inputs.vm_name }}.iso" \
            --graphics vnc,listen=0.0.0.0,port=5900 \
            --network network=default,model=e1000 \
            $FIRMWARE_OPTS \
            --noautoconsole \
            --wait=0

          nohup websockify --web=/usr/share/novnc 6080 localhost:5900 &

          VNC_LINK="http://$TAILSCALE_IP:6080/vnc.html"

          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\":\"üöÄ VM Started! Connect via VNC and install Windows:\nüîπ **Tailscale IP:** \`$TAILSCALE_IP\`\nüîπ **noVNC:** $VNC_LINK\nüë§ Owner: @Danielreal64\"}"

          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"content":"‚è≥ Workflow will remain active for 6 hours..."}'

          # Keep the job alive for 6 hours (21600 seconds)
          timeout 21600 bash -c "while true; do sleep 30; done"
