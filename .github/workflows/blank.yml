name: VM-Server

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'OS ISO?'
        required: true
        default: 'https://software-download.microsoft.com/db/Win11_22H2_English_x64.iso'
      vm_name:
        description: 'Name of the VM/disk'
        required: true
        default: 'windowsserver'
      product_key:
        description: 'Windows Product Key'
        required: true
        default: 'XXXXX-XXXXX-XXXXX-XXXXX-XXXXX'

jobs:
  run-vm:
    runs-on: ubuntu-latest
    env:
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
      TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}

    steps:
      - name: Send Start Info
        run: |
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
{
  "content": "🛠️ **Starting Auto Windows Install**\nISO: \`${{ github.event.inputs.iso_url }}\`\nVM: \`${{ github.event.inputs.vm_name }}\`\n🔑 Product Key: \`${{ github.event.inputs.product_key }}\`"
}
EOF

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86 ovmf curl novnc websockify genisoimage
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Download Windows ISO
        run: |
          wget -O "${{ github.event.inputs.vm_name }}.iso" "${{ github.event.inputs.iso_url }}"
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
{
  "content": "✅ ISO downloaded."
}
EOF

      - name: Create 256GB Disk
        run: |
          qemu-img create -f qcow2 "${{ github.event.inputs.vm_name }}.qcow2" 256G
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
{
  "content": "📦 Virtual disk created (256G)."
}
EOF

      - name: Generate autounattend.xml
        run: |
          cat > autounattend.xml <<EOF
<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend">
  <settings pass="windowsPE">
    <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
      <UserData>
        <ProductKey>
          <Key>${{ github.event.inputs.product_key }}</Key>
          <WillShowUI>Never</WillShowUI>
        </ProductKey>
        <AcceptEula>true</AcceptEula>
        <FullName>Administrator</FullName>
        <Organization>AutoVM</Organization>
      </UserData>
      <ImageInstall>
        <OSImage>
          <InstallFrom>
            <MetaData>
              <Key>/IMAGE/INDEX</Key>
              <Value>1</Value>
            </MetaData>
          </InstallFrom>
          <InstallTo>
            <DiskID>0</DiskID>
            <PartitionID>1</PartitionID>
          </InstallTo>
          <WillShowUI>Never</WillShowUI>
        </OSImage>
      </ImageInstall>
      <DiskConfiguration>
        <Disk wcm:action="add">
          <DiskID>0</DiskID>
          <WillWipeDisk>true</WillWipeDisk>
          <CreatePartitions>
            <CreatePartition wcm:action="add">
              <Order>1</Order>
              <Type>Primary</Type>
              <Size>100000</Size>
            </CreatePartition>
          </CreatePartitions>
        </Disk>
        <WillShowUI>Never</WillShowUI>
      </DiskConfiguration>
    </component>
  </settings>
  <settings pass="oobeSystem">
    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
      <OOBE>
        <HideEULAPage>true</HideEULAPage>
        <NetworkLocation>Work</NetworkLocation>
        <ProtectYourPC>1</ProtectYourPC>
      </OOBE>
      <UserAccounts>
        <AdministratorPassword>
          <Value>Admin1234</Value>
          <PlainText>true</PlainText>
        </AdministratorPassword>
      </UserAccounts>
      <AutoLogon>
        <Username>Administrator</Username>
        <Password>
          <Value>Admin1234</Value>
          <PlainText>true</PlainText>
        </Password>
        <Enabled>true</Enabled>
      </AutoLogon>
      <RegisteredOwner>Daniel</RegisteredOwner>
    </component>
  </settings>
</unattend>
EOF

      - name: Create autounattend.iso
        run: |
          mkdir -p iso_root
          cp autounattend.xml iso_root/
          genisoimage -o autounattend.iso -udf -b autounattend.xml iso_root

      - name: Start Tailscale
        run: |
          sudo tailscaled --tun=userspace-networking --socks5-server=localhost:1055 &
          sleep 5
          sudo tailscale up --authkey=$TAILSCALE_AUTHKEY --hostname="${{ github.event.inputs.vm_name }}" --accept-routes
          TS_IP=$(tailscale ip -4 | head -n 1)
          echo "TAILSCALE_IP=$TS_IP" >> $GITHUB_ENV

          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
{
  "content": "🔌 Tailscale connected: \`$TS_IP\`"
}
EOF

      - name: Launch VM and Hold Job
        run: |
          if [ -f /usr/share/OVMF/OVMF_CODE_4M.fd ]; then
            CODE_PATH=/usr/share/OVMF/OVMF_CODE_4M.fd
            VARS_PATH=/usr/share/OVMF/OVMF_VARS_4M.fd
          else
            wget -q https://github.com/tianocore/edk2/releases/download/edk2-stable202307/OVMF_CODE.fd -O OVMF_CODE.fd
            wget -q https://github.com/tianocore/edk2/releases/download/edk2-stable202307/OVMF_VARS.fd -O OVMF_VARS.fd
            CODE_PATH=./OVMF_CODE.fd
            VARS_PATH=./OVMF_VARS.fd
          fi

          sudo qemu-system-x86_64 \
            -enable-kvm \
            -cpu host \
            -smp 4 \
            -m 16G \
            -drive if=pflash,format=raw,readonly=on,file=$CODE_PATH \
            -drive if=pflash,format=raw,file=$VARS_PATH \
            -drive file="${{ github.event.inputs.vm_name }}.qcow2",format=qcow2 \
            -drive file="${{ github.event.inputs.vm_name }}.iso",media=cdrom \
            -drive file=autounattend.iso,media=cdrom \
            -boot order=d \
            -vnc :0 \
            -netdev user,id=net0,hostfwd=tcp::3389-:3389 \
            -device e1000,netdev=net0 \
            -device usb-ehci,id=ehci \
            -device usb-tablet,bus=ehci.0 &

          sleep 10
          nohup websockify --web=/usr/share/novnc 6080 localhost:5900 &

          VNC_LINK="http://$TAILSCALE_IP:6080/vnc.html"
          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
{
  "content": "🚀 VM Started! Windows is auto-installing...\n🌐 Tailscale: \`$TAILSCALE_IP\`\n🔗 VNC: $VNC_LINK\n👤 Owner: @Danielreal64"
}
EOF

          curl -X POST "https://discord.com/api/v10/channels/$DISCORD_CHANNEL_ID/messages" \
            -H "Authorization: Bot $DISCORD_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
{
  "content": "⏳ Workflow will remain active for 6 hours while Windows installs automatically..."
}
EOF

          timeout 21600 bash -c "while true; do sleep 30; done"
